/-
Copyright (c) 2021 Adam Topaz. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Adam Topaz
-/
import category_theory.sites.sheaf

/-!

# The plus construction for presheaves.

This file contains the construction of `P‚Å∫`, for a presheaf `P : C·µí·µñ ‚•§ D`
where `C` is endowed with a grothendieck topology `J`.

See https://stacks.math.columbia.edu/tag/00W1 for details.

-/

namespace category_theory.grothendieck_topology

open category_theory
open category_theory.limits
open opposite

universes w v u
variables {C : Type u} [category.{v} C] (J : grothendieck_topology C)
variables {D : Type w} [category.{max v u} D]

noncomputable theory

variables [‚àÄ (P : C·µí·µñ ‚•§ D) (X : C) (S : J.cover X), has_multiequalizer (S.index P)]
variables (P : C·µí·µñ ‚•§ D)

/-- The diagram whose colimit defines the values of `plus`. -/
@[simps]
def diagram (X : C) : (J.cover X)·µí·µñ ‚•§ D :=
{ obj := Œª S, multiequalizer (S.unop.index P),
  map := Œª S T f,
    multiequalizer.lift _ _ (Œª I, multiequalizer.Œπ (S.unop.index P) (I.map f.unop)) $
      Œª I, multiequalizer.condition (S.unop.index P) (I.map f.unop),
  map_id' := Œª S, by { ext I, cases I, simpa },
  map_comp' := Œª S T W f g, by { ext I, simpa } }

/-- A helper definition used to define the morphisms for `plus`. -/
@[simps]
def diagram_pullback {X Y : C} (f : X ‚ü∂ Y) :
  J.diagram P Y ‚ü∂ (J.pullback f).op ‚ãô J.diagram P X :=
{ app := Œª S, multiequalizer.lift _ _
    (Œª I, multiequalizer.Œπ (S.unop.index P) I.base) $
      Œª I, multiequalizer.condition (S.unop.index P) I.base,
  naturality' := Œª S T f, by { ext, dsimp, simpa } }

variable [‚àÄ (X : C), has_colimits_of_shape (J.cover X)·µí·µñ D]

/-- The plus construction, associating a presheaf to any presheaf.
See `plus` below for a functorial version.
-/
@[simps]
def plus_obj : C·µí·µñ ‚•§ D :=
{ obj := Œª X, colimit (J.diagram P X.unop),
  map := Œª X Y f, colim_map (J.diagram_pullback P f.unop) ‚â´ colimit.pre _ _,
  map_id' := begin
    intros X,
    ext S,
    dsimp,
    simp only [diagram_pullback_app, colimit.Œπ_pre,
      Œπ_colim_map_assoc, category.comp_id],
    let e := S.unop.pullback_id,
    dsimp only [functor.op, pullback_obj],
    erw [‚Üê colimit.w _ e.inv.op, ‚Üê category.assoc],
    convert category.id_comp _,
    ext I,
    dsimp,
    simp only [multiequalizer.lift_Œπ, category.id_comp, category.assoc],
    dsimp [cover.arrow.map, cover.arrow.base],
    cases I,
    congr,
    simp,
  end,
  map_comp' := begin
    intros X Y Z f g,
    ext S,
    dsimp,
    simp only [diagram_pullback_app, colimit.Œπ_pre_assoc,
      colimit.Œπ_pre, Œπ_colim_map_assoc, category.assoc],
    let e := S.unop.pullback_comp g.unop f.unop,
    dsimp only [functor.op, pullback_obj],
    erw [‚Üê colimit.w _ e.inv.op, ‚Üê category.assoc, ‚Üê category.assoc],
    congr' 1,
    ext I,
    dsimp,
    simp only [multiequalizer.lift_Œπ, category.assoc],
    cases I,
    dsimp only [cover.arrow.base, cover.arrow.map],
    congr' 2,
    simp,
  end }

/-- An auxiliary definition used in `plus` below. -/
@[simps]
def plus_map {P Q : C·µí·µñ ‚•§ D} (Œ∑ : P ‚ü∂ Q) : J.plus_obj P ‚ü∂ J.plus_obj Q :=
{ app := Œª X, colim_map
  { app := Œª S, multiequalizer.lift _ _
      (Œª I, multiequalizer.Œπ (S.unop.index P) I ‚â´ Œ∑.app (op I.Y)) begin
        intros I,
        erw [category.assoc, category.assoc, ‚Üê Œ∑.naturality, ‚Üê Œ∑.naturality,
          ‚Üê category.assoc, ‚Üê category.assoc, multiequalizer.condition],
        refl,
      end,
    naturality' := Œª S T e, by { dsimp, ext, simpa } },
  naturality' := begin
    intros X Y f,
    dsimp,
    ext,
    simp only [diagram_pullback_app, Œπ_colim_map, colimit.Œπ_pre_assoc,
      colimit.Œπ_pre, Œπ_colim_map_assoc, category.assoc],
    simp_rw ‚Üê category.assoc,
    congr' 1,
    ext,
    dsimp,
    simpa,
  end }

variable (D)

/-- The plus construction, a functor sending `P` to `J.plus_obj P`. -/
@[simps]
def plus_functor : (C·µí·µñ ‚•§ D) ‚•§ C·µí·µñ ‚•§ D :=
{ obj := Œª P, J.plus_obj P,
  map := Œª P Q Œ∑, J.plus_map Œ∑,
  map_id' := begin
    intros P,
    ext,
    dsimp,
    simp only [Œπ_colim_map, category.comp_id],
    convert category.id_comp _,
    ext,
    simp only [multiequalizer.lift_Œπ, category.id_comp],
    exact category.comp_id _,
  end,
  map_comp' := begin
    intros P Q R Œ∑ Œ≥,
    ext,
    dsimp,
    simp only [Œπ_colim_map, Œπ_colim_map_assoc],
    rw ‚Üê category.assoc,
    congr' 1,
    ext,
    dsimp,
    simp,
  end }

variable {D}

/-- The canonical map from `P` to `J.plus.obj P`.
See `to_plus` for a functorial version. -/
@[simps]
def to_plus : P ‚ü∂ J.plus_obj P :=
{ app := Œª X, cover.to_multiequalizer (‚ä§ : J.cover X.unop) P ‚â´
    colimit.Œπ (J.diagram P X.unop) (op ‚ä§),
  naturality' := begin
    intros X Y f,
    dsimp,
    delta cover.to_multiequalizer,
    simp only [diagram_pullback_app, colimit.Œπ_pre, Œπ_colim_map_assoc, category.assoc],
    dsimp only [functor.op, unop_op],
    let e : (J.pullback f.unop).obj ‚ä§ ‚ü∂ ‚ä§ := hom_of_le (semilattice_inf_top.le_top _),
    rw [‚Üê colimit.w _ e.op, ‚Üê category.assoc, ‚Üê category.assoc, ‚Üê category.assoc],
    congr' 1,
    ext,
    dsimp,
    simp only [multiequalizer.lift_Œπ, category.assoc],
    dsimp [cover.arrow.base],
    simp,
  end }

variable (D)

/-- The natural transformation from the identity functor to `plus`. -/
@[simps]
def to_plus_nat_trans : (ùü≠ (C·µí·µñ ‚•§ D)) ‚ü∂ J.plus_functor D :=
{ app := Œª P, J.to_plus P,
  naturality' := begin
    intros P Q Œ∑,
    ext,
    dsimp,
    delta cover.to_multiequalizer,
    simp only [Œπ_colim_map, category.assoc],
    simp_rw ‚Üê category.assoc,
    congr' 1,
    ext,
    dsimp,
    simp,
  end }

variable {D}

/-- `(P ‚ü∂ P‚Å∫)‚Å∫ = P‚Å∫ ‚ü∂ P‚Å∫‚Å∫` -/
@[simp]
lemma plus_map_to_plus : J.plus_map (J.to_plus P) = J.to_plus (J.plus_obj P) :=
begin
  ext X S,
  dsimp,
  delta cover.to_multiequalizer,
  simp only [Œπ_colim_map],
  let e : S.unop ‚ü∂ ‚ä§ := hom_of_le (semilattice_inf_top.le_top _),
  simp_rw [‚Üê colimit.w _ e.op, ‚Üê category.assoc],
  congr' 1,
  ext I,
  dsimp,
  simp only [diagram_pullback_app, colimit.Œπ_pre, multiequalizer.lift_Œπ,
    Œπ_colim_map_assoc, category.assoc],
  dsimp only [functor.op],
  let ee : (J.pullback (I.map e).f).obj S.unop ‚ü∂ ‚ä§ := hom_of_le (semilattice_inf_top.le_top _),
  simp_rw [‚Üê colimit.w _ ee.op, ‚Üê category.assoc],
  congr' 1,
  ext II,
  dsimp,
  simp only [limit.lift_œÄ, multifork.of_Œπ_œÄ_app, multiequalizer.lift_Œπ, category.assoc],
  dsimp [multifork.of_Œπ],
  convert multiequalizer.condition (S.unop.index P)
    ‚ü®_, _, _, II.f, ùüô _, I.f, II.f ‚â´ I.f, I.hf, sieve.downward_closed _ I.hf _, by simp‚ü©,
  { cases I, refl },
  { dsimp [cover.index],
    erw [P.map_id, category.comp_id],
    refl }
end

lemma is_iso_to_plus_of_is_sheaf (hP : presheaf.is_sheaf J P) : is_iso (J.to_plus P) :=
begin
  rw presheaf.is_sheaf_iff_multiequalizer at hP,
  resetI,
  suffices : ‚àÄ X, is_iso ((J.to_plus P).app X),
  { resetI, apply nat_iso.is_iso_of_is_iso_app },
  intros X, dsimp,
  suffices : is_iso (colimit.Œπ (J.diagram P X.unop) (op ‚ä§)),
  { resetI, apply is_iso.comp_is_iso },
  suffices : ‚àÄ (S T : (J.cover X.unop)·µí·µñ) (f : S ‚ü∂ T), is_iso ((J.diagram P X.unop).map f),
  { resetI, apply is_iso_Œπ_of_is_initial (initial_op_of_terminal is_terminal_top) },
  intros S T e,
  have : S.unop.to_multiequalizer P ‚â´ (J.diagram P (X.unop)).map e =
    T.unop.to_multiequalizer P, by { ext, dsimp, simpa },
  have : (J.diagram P (X.unop)).map e = inv (S.unop.to_multiequalizer P) ‚â´
    T.unop.to_multiequalizer P, by simp [‚Üê this],
  rw this, apply_instance,
end

/-- The natural isomorphism between `P` and `P‚Å∫` when `P` is a sheaf. -/
def iso_to_plus (hP : presheaf.is_sheaf J P) : P ‚âÖ J.plus_obj P :=
by letI := is_iso_to_plus_of_is_sheaf J P hP; exact as_iso (J.to_plus P)

/-- Lift a morphism `P ‚ü∂ Q` to `P‚Å∫ ‚ü∂ Q` when `Q` is a sheaf. -/
def plus_lift {P Q : C·µí·µñ ‚•§ D} (Œ∑ : P ‚ü∂ Q) (hQ : presheaf.is_sheaf J Q) :
  J.plus_obj P ‚ü∂ Q :=
J.plus_map Œ∑ ‚â´ (J.iso_to_plus Q hQ).inv

lemma to_plus_plus_lift {P Q : C·µí·µñ ‚•§ D} (Œ∑ : P ‚ü∂ Q) (hQ : presheaf.is_sheaf J Q) :
  J.to_plus P ‚â´ J.plus_lift Œ∑ hQ = Œ∑ :=
begin
  dsimp [plus_lift],
  rw ‚Üê category.assoc,
  rw iso.comp_inv_eq,
  dsimp only [iso_to_plus, as_iso],
  change (J.to_plus_nat_trans D).app _ ‚â´ _ = _,
  erw (J.to_plus_nat_trans D).naturality,
  refl,
end

lemma plus_lift_unique {P Q : C·µí·µñ ‚•§ D} (Œ∑ : P ‚ü∂ Q) (hQ : presheaf.is_sheaf J Q)
  (Œ≥ : J.plus_obj P ‚ü∂ Q) (hŒ≥ : J.to_plus P ‚â´ Œ≥ = Œ∑) : Œ≥ = J.plus_lift Œ∑ hQ :=
begin
  dsimp only [plus_lift],
  symmetry,
  change (J.plus_functor D).map Œ∑ ‚â´ _ = _,
  rw [iso.comp_inv_eq, ‚Üê hŒ≥, (J.plus_functor D).map_comp],
  dsimp only [iso_to_plus, as_iso],
  change _ = (ùü≠ _).map Œ≥ ‚â´ (J.to_plus_nat_trans D).app _,
  erw (J.to_plus_nat_trans D).naturality,
  congr' 1,
  dsimp only [plus_functor, to_plus_nat_trans],
  rw [J.plus_map_to_plus P],
end

lemma plus_hom_ext {P Q : C·µí·µñ ‚•§ D} (Œ∑ Œ≥ : J.plus_obj P ‚ü∂ Q) (hQ : presheaf.is_sheaf J Q)
  (h : J.to_plus P ‚â´ Œ∑ = J.to_plus P ‚â´ Œ≥) : Œ∑ = Œ≥ :=
begin
  have : Œ≥ = J.plus_lift (J.to_plus P ‚â´ Œ≥) hQ,
  { apply plus_lift_unique, refl },
  rw this,
  apply plus_lift_unique, exact h
end

end category_theory.grothendieck_topology
