/-
Copyright (c) 2021 Yury Kudryashov. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Yury Kudryashov
-/
import topology.algebra.monoid
import algebra.module.prod
import topology.homeomorph
import group_theory.group_action.basic

/-!
# Continuous monoid action

In this file we define class `has_continuous_smul`. We say `has_continuous_smul M Œ±` if `M` acts on
`Œ±` and the map `(c, x) ‚Ü¶ c ‚Ä¢ x` is continuous on `M √ó Œ±`. We reuse this class for topological
(semi)modules, vector spaces and algebras.

## Main definitions

* `has_continuous_smul M Œ±` : typeclass saying that the map `(c, x) ‚Ü¶ c ‚Ä¢ x` is continuous
  on `M √ó Œ±`;
* `homeomorph.smul_of_ne_zero`: if a group with zero `G‚ÇÄ` (e.g., a field) acts on `Œ±` and `c : G‚ÇÄ`
  is a nonzero element of `G‚ÇÄ`, then scalar multiplication by `c` is a homeomorphism of `Œ±`;
* `homeomorph.smul`: scalar multiplication by an element of a group `G` acting on `Œ±`
  is a homeomorphism of `Œ±`.
* `units.has_continuous_smul`: scalar multiplication by `units M` is continuous when scalar
  multiplication by `M` is continuous. This allows `homeomorph.smul` to be used with on monoids
  with `G = units M`.

## Main results

Besides homeomorphisms mentioned above, in this file we provide lemmas like `continuous.smul`
or `filter.tendsto.smul` that provide dot-syntax access to `continuous_smul`.
-/

open_locale topological_space pointwise
open filter

/-- Class `has_continuous_smul M Œ±` says that the scalar multiplication `(‚Ä¢) : M ‚Üí Œ± ‚Üí Œ±`
is continuous in both arguments. We use the same class for all kinds of multiplicative actions,
including (semi)modules and algebras. -/
class has_continuous_smul (M Œ± : Type*) [has_scalar M Œ±]
  [topological_space M] [topological_space Œ±] : Prop :=
(continuous_smul : continuous (Œªp : M √ó Œ±, p.1 ‚Ä¢ p.2))

export has_continuous_smul (continuous_smul)

/-- Class `has_continuous_vadd M Œ±` says that the additive action `(+·µ•) : M ‚Üí Œ± ‚Üí Œ±`
is continuous in both arguments. We use the same class for all kinds of additive actions,
including (semi)modules and algebras. -/
class has_continuous_vadd (M Œ± : Type*) [has_vadd M Œ±]
  [topological_space M] [topological_space Œ±] : Prop :=
(continuous_vadd : continuous (Œªp : M √ó Œ±, p.1 +·µ• p.2))

export has_continuous_vadd (continuous_vadd)

attribute [to_additive] has_continuous_smul

variables {M Œ± Œ≤ : Type*} [topological_space M] [topological_space Œ±]

section has_scalar

variables [has_scalar M Œ±] [has_continuous_smul M Œ±]

@[to_additive]
lemma filter.tendsto.smul {f : Œ≤ ‚Üí M} {g : Œ≤ ‚Üí Œ±} {l : filter Œ≤} {c : M} {a : Œ±}
  (hf : tendsto f l (ùìù c)) (hg : tendsto g l (ùìù a)) :
  tendsto (Œª x, f x ‚Ä¢ g x) l (ùìù $ c ‚Ä¢ a) :=
(continuous_smul.tendsto _).comp (hf.prod_mk_nhds hg)

@[to_additive]
lemma filter.tendsto.const_smul {f : Œ≤ ‚Üí Œ±} {l : filter Œ≤} {a : Œ±} (hf : tendsto f l (ùìù a))
  (c : M) :
  tendsto (Œª x, c ‚Ä¢ f x) l (ùìù (c ‚Ä¢ a)) :=
tendsto_const_nhds.smul hf

@[to_additive]
lemma filter.tendsto.smul_const {f : Œ≤ ‚Üí M} {l : filter Œ≤} {c : M}
  (hf : tendsto f l (ùìù c)) (a : Œ±) :
  tendsto (Œª x, (f x) ‚Ä¢ a) l (ùìù (c ‚Ä¢ a)) :=
hf.smul tendsto_const_nhds

variables [topological_space Œ≤] {f : Œ≤ ‚Üí M} {g : Œ≤ ‚Üí Œ±} {b : Œ≤} {s : set Œ≤}

@[to_additive]
lemma continuous_within_at.smul (hf : continuous_within_at f s b)
  (hg : continuous_within_at g s b) :
  continuous_within_at (Œª x, f x ‚Ä¢ g x) s b :=
hf.smul hg

@[to_additive]
lemma continuous_within_at.const_smul (hg : continuous_within_at g s b) (c : M) :
  continuous_within_at (Œª x, c ‚Ä¢ g x) s b :=
hg.const_smul c

@[to_additive]
lemma continuous_at.smul (hf : continuous_at f b) (hg : continuous_at g b) :
  continuous_at (Œª x, f x ‚Ä¢ g x) b :=
hf.smul hg

@[to_additive]
lemma continuous_at.const_smul (hg : continuous_at g b) (c : M) :
  continuous_at (Œª x, c ‚Ä¢ g x) b :=
hg.const_smul c

@[to_additive]
lemma continuous_on.smul (hf : continuous_on f s) (hg : continuous_on g s) :
  continuous_on (Œª x, f x ‚Ä¢ g x) s :=
Œª x hx, (hf x hx).smul (hg x hx)

@[to_additive]
lemma continuous_on.const_smul (hg : continuous_on g s) (c : M) :
  continuous_on (Œª x, c ‚Ä¢ g x) s :=
Œª x hx, (hg x hx).const_smul c

@[continuity, to_additive]
lemma continuous.smul (hf : continuous f) (hg : continuous g) :
  continuous (Œª x, f x ‚Ä¢ g x) :=
continuous_smul.comp (hf.prod_mk hg)

@[to_additive]
lemma continuous.const_smul (hg : continuous g) (c : M) :
  continuous (Œª x, c ‚Ä¢ g x) :=
continuous_smul.comp (continuous_const.prod_mk hg)

end has_scalar

section monoid

variables [monoid M] [mul_action M Œ±] [has_continuous_smul M Œ±]

instance units.has_continuous_smul : has_continuous_smul (units M) Œ± :=
{ continuous_smul :=
    show continuous ((Œª p : M √ó Œ±, p.fst ‚Ä¢ p.snd) ‚àò (Œª p : units M √ó Œ±, (p.1, p.2))),
    from continuous_smul.comp ((units.continuous_coe.comp continuous_fst).prod_mk continuous_snd) }

@[to_additive]
lemma smul_closure_subset (c : M) (s : set Œ±) : c ‚Ä¢ closure s ‚äÜ closure (c ‚Ä¢ s) :=
((set.maps_to_image _ _).closure $ continuous_id.const_smul c).image_subset

@[to_additive]
lemma smul_closure_orbit_subset (c : M) (x : Œ±) :
  c ‚Ä¢ closure (mul_action.orbit M x) ‚äÜ closure (mul_action.orbit M x) :=
(smul_closure_subset c _).trans $ closure_mono $ mul_action.smul_orbit_subset _ _

end monoid

section group

variables {G : Type*} [topological_space G] [group G] [mul_action G Œ±]
  [has_continuous_smul G Œ±]

@[to_additive]
lemma tendsto_const_smul_iff {f : Œ≤ ‚Üí Œ±} {l : filter Œ≤} {a : Œ±} (c : G) :
  tendsto (Œª x, c ‚Ä¢ f x) l (ùìù $ c ‚Ä¢ a) ‚Üî tendsto f l (ùìù a) :=
‚ü®Œª h, by simpa only [inv_smul_smul] using h.const_smul c‚Åª¬π,
  Œª h, h.const_smul _‚ü©

variables [topological_space Œ≤] {f : Œ≤ ‚Üí Œ±} {b : Œ≤}  {s : set Œ≤}

@[to_additive]
lemma continuous_within_at_const_smul_iff (c : G) :
  continuous_within_at (Œª x, c ‚Ä¢ f x) s b ‚Üî continuous_within_at f s b :=
tendsto_const_smul_iff c

@[to_additive]
lemma continuous_on_const_smul_iff (c : G) :
  continuous_on (Œª x, c ‚Ä¢ f x) s ‚Üî continuous_on f s :=
forall_congr $ Œª b, forall_congr $ Œª hb, continuous_within_at_const_smul_iff c

@[to_additive]
lemma continuous_at_const_smul_iff (c : G) :
  continuous_at (Œª x, c ‚Ä¢ f x) b ‚Üî continuous_at f b :=
tendsto_const_smul_iff c

@[to_additive]
lemma continuous_const_smul_iff (c : G) :
  continuous (Œª x, c ‚Ä¢ f x) ‚Üî continuous f :=
by simp only [continuous_iff_continuous_at, continuous_at_const_smul_iff]

/-- Scalar multiplication by an element of a group `G` acting on `Œ±` is a homeomorphism from `Œ±`
to itself. -/
protected def homeomorph.smul (c : G) : Œ± ‚âÉ‚Çú Œ± :=
{ to_equiv := mul_action.to_perm_hom G Œ± c,
  continuous_to_fun  := continuous_id.const_smul _,
  continuous_inv_fun := continuous_id.const_smul _ }

/-- Affine-addition of an element of an additive group `G` acting on `Œ±` is a homeomorphism
from `Œ±` to itself. -/
protected def homeomorph.vadd {G : Type*} [topological_space G] [add_group G] [add_action G Œ±]
  [has_continuous_vadd G Œ±] (c : G) : Œ± ‚âÉ‚Çú Œ± :=
{ to_equiv := add_action.to_perm_hom Œ± G c,
  continuous_to_fun  := continuous_id.const_vadd _,
  continuous_inv_fun := continuous_id.const_vadd _ }

attribute [to_additive] homeomorph.smul

@[to_additive]
lemma is_open_map_smul (c : G) : is_open_map (Œª x : Œ±, c ‚Ä¢ x) :=
(homeomorph.smul c).is_open_map

@[to_additive] lemma is_open.smul {s : set Œ±} (hs : is_open s) (c : G) : is_open (c ‚Ä¢ s) :=
is_open_map_smul c s hs

@[to_additive]
lemma is_closed_map_smul (c : G) : is_closed_map (Œª x : Œ±, c ‚Ä¢ x) :=
(homeomorph.smul c).is_closed_map

@[to_additive] lemma is_closed.smul {s : set Œ±} (hs : is_closed s) (c : G) : is_closed (c ‚Ä¢ s) :=
is_closed_map_smul c s hs

end group

section group_with_zero

variables {G‚ÇÄ : Type*} [topological_space G‚ÇÄ] [group_with_zero G‚ÇÄ] [mul_action G‚ÇÄ Œ±]
  [has_continuous_smul G‚ÇÄ Œ±]

lemma tendsto_const_smul_iff‚ÇÄ {f : Œ≤ ‚Üí Œ±} {l : filter Œ≤} {a : Œ±} {c : G‚ÇÄ} (hc : c ‚â† 0) :
  tendsto (Œª x, c ‚Ä¢ f x) l (ùìù $ c ‚Ä¢ a) ‚Üî tendsto f l (ùìù a) :=
tendsto_const_smul_iff (units.mk0 c hc)

variables [topological_space Œ≤] {f : Œ≤ ‚Üí Œ±} {b : Œ≤} {c : G‚ÇÄ} {s : set Œ≤}

lemma continuous_within_at_const_smul_iff‚ÇÄ (hc : c ‚â† 0) :
  continuous_within_at (Œª x, c ‚Ä¢ f x) s b ‚Üî continuous_within_at f s b :=
tendsto_const_smul_iff (units.mk0 c hc)

lemma continuous_on_const_smul_iff‚ÇÄ (hc : c ‚â† 0) :
  continuous_on (Œª x, c ‚Ä¢ f x) s ‚Üî continuous_on f s :=
continuous_on_const_smul_iff (units.mk0 c hc)

lemma continuous_at_const_smul_iff‚ÇÄ (hc : c ‚â† 0) :
  continuous_at (Œª x, c ‚Ä¢ f x) b ‚Üî continuous_at f b :=
continuous_at_const_smul_iff (units.mk0 c hc)

lemma continuous_const_smul_iff‚ÇÄ (hc : c ‚â† 0) :
  continuous (Œª x, c ‚Ä¢ f x) ‚Üî continuous f :=
continuous_const_smul_iff (units.mk0 c hc)

/-- Scalar multiplication by a non-zero element of a group with zero acting on `Œ±` is a
homeomorphism from `Œ±` onto itself. -/
protected def homeomorph.smul_of_ne_zero (c : G‚ÇÄ) (hc : c ‚â† 0) : Œ± ‚âÉ‚Çú Œ± :=
homeomorph.smul (units.mk0 c hc)

lemma is_open_map_smul‚ÇÄ {c : G‚ÇÄ} (hc : c ‚â† 0) : is_open_map (Œª x : Œ±, c ‚Ä¢ x) :=
(homeomorph.smul_of_ne_zero c hc).is_open_map

/-- `smul` is a closed map in the second argument.

The lemma that `smul` is a closed map in the first argument (for a normed space over a complete
normed field) is `is_closed_map_smul_left` in `analysis.normed_space.finite_dimension`. -/
lemma is_closed_map_smul_of_ne_zero {c : G‚ÇÄ} (hc : c ‚â† 0) : is_closed_map (Œª x : Œ±, c ‚Ä¢ x) :=
(homeomorph.smul_of_ne_zero c hc).is_closed_map

/-- `smul` is a closed map in the second argument.

The lemma that `smul` is a closed map in the first argument (for a normed space over a complete
normed field) is `is_closed_map_smul_left` in `analysis.normed_space.finite_dimension`. -/
lemma is_closed_map_smul‚ÇÄ {ùïú M : Type*} [division_ring ùïú] [add_comm_monoid M] [topological_space M]
  [t1_space M] [module ùïú M] [topological_space ùïú] [has_continuous_smul ùïú M] (c : ùïú) :
  is_closed_map (Œª x : M, c ‚Ä¢ x) :=
begin
  rcases eq_or_ne c 0 with (rfl|hne),
  { simp only [zero_smul], exact is_closed_map_const },
  { exact (homeomorph.smul_of_ne_zero c hne).is_closed_map },
end

end group_with_zero

namespace is_unit

variables [monoid M] [mul_action M Œ±] [has_continuous_smul M Œ±]

lemma tendsto_const_smul_iff {f : Œ≤ ‚Üí Œ±} {l : filter Œ≤} {a : Œ±} {c : M} (hc : is_unit c) :
  tendsto (Œª x, c ‚Ä¢ f x) l (ùìù $ c ‚Ä¢ a) ‚Üî tendsto f l (ùìù a) :=
let ‚ü®u, hu‚ü© := hc in hu ‚ñ∏ tendsto_const_smul_iff u

variables [topological_space Œ≤] {f : Œ≤ ‚Üí Œ±} {b : Œ≤} {c : M} {s : set Œ≤}

lemma continuous_within_at_const_smul_iff (hc : is_unit c) :
  continuous_within_at (Œª x, c ‚Ä¢ f x) s b ‚Üî continuous_within_at f s b :=
let ‚ü®u, hu‚ü© := hc in hu ‚ñ∏ continuous_within_at_const_smul_iff u

lemma continuous_on_const_smul_iff (hc : is_unit c) :
  continuous_on (Œª x, c ‚Ä¢ f x) s ‚Üî continuous_on f s :=
let ‚ü®u, hu‚ü© := hc in hu ‚ñ∏ continuous_on_const_smul_iff u

lemma continuous_at_const_smul_iff (hc : is_unit c) :
  continuous_at (Œª x, c ‚Ä¢ f x) b ‚Üî continuous_at f b :=
let ‚ü®u, hu‚ü© := hc in hu ‚ñ∏ continuous_at_const_smul_iff u

lemma continuous_const_smul_iff (hc : is_unit c) :
  continuous (Œª x, c ‚Ä¢ f x) ‚Üî continuous f :=
let ‚ü®u, hu‚ü© := hc in hu ‚ñ∏ continuous_const_smul_iff u

lemma is_open_map_smul (hc : is_unit c) : is_open_map (Œª x : Œ±, c ‚Ä¢ x) :=
let ‚ü®u, hu‚ü© := hc in hu ‚ñ∏ is_open_map_smul u

lemma is_closed_map_smul (hc : is_unit c) : is_closed_map (Œª x : Œ±, c ‚Ä¢ x) :=
let ‚ü®u, hu‚ü© := hc in hu ‚ñ∏ is_closed_map_smul u

end is_unit

@[to_additive]
instance has_continuous_mul.has_continuous_smul {M : Type*} [monoid M]
  [topological_space M] [has_continuous_mul M] :
  has_continuous_smul M M :=
‚ü®continuous_mul‚ü©

@[to_additive]
instance [topological_space Œ≤] [has_scalar M Œ±] [has_scalar M Œ≤] [has_continuous_smul M Œ±]
  [has_continuous_smul M Œ≤] :
  has_continuous_smul M (Œ± √ó Œ≤) :=
‚ü®(continuous_fst.smul (continuous_fst.comp continuous_snd)).prod_mk
  (continuous_fst.smul (continuous_snd.comp continuous_snd))‚ü©

@[to_additive]
instance {Œπ : Type*} {Œ≥ : Œπ ‚Üí Type}
  [‚àÄ i, topological_space (Œ≥ i)] [Œ† i, has_scalar M (Œ≥ i)] [‚àÄ i, has_continuous_smul M (Œ≥ i)] :
  has_continuous_smul M (Œ† i, Œ≥ i) :=
‚ü®continuous_pi $ Œª i,
  (continuous_fst.smul continuous_snd).comp $
    continuous_fst.prod_mk ((continuous_apply i).comp continuous_snd)‚ü©
